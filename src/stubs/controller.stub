<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Intervention\Image\Facades\Image;

class DummyClass extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        $keyword = $request->search;
        $perPage = $request->pages ?? 10;
		$sort = $request->sort;
		$toggle = stripos($request->toggle, 'sorting_desc');

		if (!empty($keyword)) {
			if (!empty($sort)) {
				if ($toggle !== false) {
					${{crudName}} = {{modelName}}::{{whereSnippet}}orderBy($sort, 'desc')->paginate($perPage);
				}
				else {
					${{crudName}} = {{modelName}}::{{whereSnippet}}orderBy($sort)->paginate($perPage);
				}
			}
			else {
				${{crudName}} = {{modelName}}::{{whereSnippet}}latest()->paginate($perPage);
			}
		}
		else {
			if (!empty($sort)) {
				if ($toggle !== false) {
					${{crudName}} = {{modelName}}::orderBy($sort, 'desc')->paginate($perPage);
				}
				else {
					${{crudName}} = {{modelName}}::orderBy($sort)->paginate($perPage);
				}
			}
			else {
				${{crudName}} = {{modelName}}::latest()->paginate($perPage);
			}
        }
		$titlePage = '{{titleForIndexPage}}';
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
        return view('{{viewPath}}{{viewName}}.index', compact('{{crudName}}', 'titlePage', 'indexUrlGetQuery'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
		$titlePage = '{{titleForSinglePage}}';
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
        return view('{{viewPath}}{{viewName}}.create', compact('titlePage', 'indexUrlGetQuery'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        {{validationRules}}
        $requestData = $request->post();
{{fileSnippetCreateOne}}
        $store = {{modelName}}::create($requestData);
{{fileSnippetCreateTwo}}
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
		return response()->json(['status' => trans('Success create!'), 'urlBack' => route('{{viewName}}.index') . ($indexUrlGetQuery ? '/?' . $indexUrlGetQuery : null)]);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
		$titlePage = '{{titleForSinglePage}}';
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
        return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}', 'titlePage', 'indexUrlGetQuery'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
		$titlePage = '{{titleForSinglePage}}';
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}', 'titlePage', 'indexUrlGetQuery'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, $id)
    {
        {{validationRules}}
        $up = {{modelName}}::findOrFail($id);
        $requestData = $request->post();
{{fileSnippetUp}}
        $up->update($requestData);
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
		return response()->json(['status' => trans('Success update!'), 'urlBack' => route('{{viewName}}.index') . ($indexUrlGetQuery ? '/?' . $indexUrlGetQuery : null)]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        $del = {{modelName}}::findOrFail($id);
{{fileSnippetDelPicture}}
        $del->delete();
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
		session()->flash('presentToastr', trans('Success delete!'));
        return redirect(route('{{viewName}}.index') . ($indexUrlGetQuery ? '/?' . $indexUrlGetQuery : null))->with('flash_message', '{{modelName}} deleted!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
	public function arrDelete(Request $request)
	{
		foreach ($request->post() as $key => $value) {
			if ($value == 1) {
				$del = {{modelName}}::findOrFail($key);
		{{fileSnippetDelPicture}}
				$del->delete();
			}
		}
		$indexUrl = url()->full();
		$indexUrlGetQuery = parse_url($indexUrl)['query'] ?? null;
		session()->flash('presentToastr', trans('Success delete!'));
        return redirect(route('{{viewName}}.index') . ($indexUrlGetQuery ? '/?' . $indexUrlGetQuery : null))->with('flash_message', '{{modelName}} deleted!');
	}
}

